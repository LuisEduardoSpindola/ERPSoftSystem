// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ERPSoft.DATA.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace ERPSoft.DATA.Models;

public partial class ERPSoftDbContext : DbContext
{
    public ERPSoftDbContext()
    {
    }

    public ERPSoftDbContext(DbContextOptions<ERPSoftDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Entrada> Entrada { get; set; }

    public virtual DbSet<Fornecedor> Fornecedor { get; set; }

    public virtual DbSet<OrdemCompra> OrdemCompra { get; set; }

    public virtual DbSet<OrdemServico> OrdemServico { get; set; }

    public virtual DbSet<PedidoMaterial> PedidoMaterial { get; set; }

    public virtual DbSet<PedidoServico> PedidoServico { get; set; }

    public virtual DbSet<Produto> Produto { get; set; }

    public virtual DbSet<Saida> Saida { get; set; }

    public virtual DbSet<Servicos> Servicos { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=LUIS_EDUARDO;Initial Catalog=ERPSoft;Persist Security Info=True;User ID=sa;Password=senha;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Entrada>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Entrada__3214EC077C240871");

            entity.HasOne(d => d.IdEntradaFornecedorNavigation).WithMany(p => p.Entrada)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKEntradaFornecedor");

            modelBuilder.Entity<Entrada>()
                .HasOne(d => d.IdEntradaProdutoNavigation)
                .WithMany(p => p.Entrada)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKEntradaProduto");
        });

        modelBuilder.Entity<OrdemCompra>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OrdemCom__3214EC0742F00992");

            entity.Property(e => e.DataCadastro).IsFixedLength();
            entity.Property(e => e.DataFormatada).IsFixedLength();
            entity.Property(e => e.Ordem).IsFixedLength();

            entity.HasOne(d => d.IdOrdemFornecedorNavigation)
                .WithMany(p => p.OrdemCompra)
                .HasForeignKey(d => d.IdOrdemFornecedor)
                .HasConstraintName("FKOrdemCompraFornecedor")
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.IdOrdemPedidoMaterialNavigation)
                .WithMany(p => p.OrdemCompra)
                .HasForeignKey(d => d.IdOrdemPedidoMaterial)
                .HasConstraintName("FKOrdemPedidoMaterial")
                .OnDelete(DeleteBehavior.Cascade);
        });


        modelBuilder.Entity<OrdemServico>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OrdemCom__3214EC0742F00992");

            entity.Property(e => e.DataCadastro).IsFixedLength();
            entity.Property(e => e.DataFormatada).IsFixedLength();
            entity.Property(e => e.Ordem).IsFixedLength();

            entity.HasOne(d => d.IdOrdemFornecedorNavigation)
                .WithMany(p => p.OrdemServico)
                .HasForeignKey(d => d.IdOrdemFornecedor)
                .HasConstraintName("FKOrdemPedidoFornecedor")
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.IdOrdemPedidoServicoNavigation)
                .WithMany(p => p.OrdemServico)
                .HasForeignKey(d => d.IdOrdemPedidoServico)
                .HasConstraintName("FKOrdemPedidoServico")
                .OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<PedidoMaterial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PedidoMa__3214EC0706E939CC");

            entity.Property(e => e.DataFormatada).IsFixedLength();

            entity.HasOne(d => d.IdPedidoMprodutoNavigation).WithMany(p => p.PedidoMaterial).HasConstraintName("FKPedidoMProduto");
        });


        modelBuilder.Entity<PedidoServico>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PedidoSe__3214EC07FEF3200E");

            entity.Property(e => e.DataFormatada).IsFixedLength();

            entity.HasOne(pedidoServico => pedidoServico.IdPedidoSfornecedorNavigation)
                .WithMany(forbecedor => forbecedor.PedidoServico)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPedidoSfornecedor");

            entity.HasOne(pedidoServico => pedidoServico.IdPedidoSservicoNavigation)
                .WithMany(servico => servico.PedidoServico)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPedidoSservico");
        });


        modelBuilder.Entity<Produto>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Produto__3214EC079A512A4B");
        });

        modelBuilder.Entity<Saida>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Saida__3214EC07D83BF2CE");

            entity.HasOne(d => d.IdSaidaFornecedorNavigation).WithMany(p => p.Saida).HasConstraintName("FKSaidaFornecedor");

            entity.HasOne(d => d.IdSaidaProdutoNavigation).WithMany(p => p.Saida).HasConstraintName("FKSaidaProduto");
        });

        modelBuilder.Entity<Servicos>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Servicos__3214EC078EB73E3B");


        });

        modelBuilder.Entity<Fornecedor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Forneced__3214EC07D1971CAE");


            entity.HasMany(fornecedor => fornecedor.Servicos)
                .WithOne(servico => servico.IdFornecedorNavigation)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKFornecedor");
        });



        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}